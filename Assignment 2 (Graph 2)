import requests
import json
from pprint import pprint
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker


# API point is from " https://apikijangportal.bnm.gov.my "

# Define the endpoint URL (Uniform Resource Identifier)
endpoint_url = "https://api.bnm.gov.my/public/msb/1.15"  

# Create a list to store the data for each month
data_list = []

# Define the header parameters
headers = {
    "Accept": "application/vnd.BNM.API.v1+json"
}

# Make the GET request
response = requests.get(endpoint_url, headers=headers)

# Check if the request was successful
if response.status_code == 200:
    # Parse the JSON response
    data = json.loads(response.text)
    
    # Print or manipulate the data as needed
    print(data)
else:
    print(f"Failed to retrieve data. HTTP Status Code: {response.status_code}")

# Extracted Json data 
pprint(data_list)
json_data=data_list

# Extract the 'data' dictionary
data_dict = data['data']

# Create a DataFrame from the data dictionary
df = pd.DataFrame(data_dict, index=[0])

# Get the year and month from the original data dictionary
year = df['year_dt'].values[0]
month = df['month_dt'].values[0]

# Map the month number to its name
month_names = {
    1: 'January', 2: 'February', 3: 'March', 4: 'April',
    5: 'May', 6: 'June', 7: 'July', 8: 'August',
    9: 'September', 10: 'October', 11: 'November', 12: 'December'
}

# Generate the title with year and month
title = f'Total Loan Disbursed in {month_names[month]} {year} by Sector'

# Drop the unnecessary columns
df.drop(columns=['year_dt','month_dt','sector','tot_loa_dis'], inplace=True)

# Rename the column headers
df.rename(columns={
    'pri_agr': 'Primary Agriculture',
    'min_and_qua':'Mining and Quarrying',
    'ele_gas_and_wat_sup':'Electricity, Gas and Water Supply',
    'construction':'Construction',
    'rea_est':'Real Estate',
    'edu_hea_oth': 'Education, Health & Others',
    'hou_sec':'Household Sector',
    'tra_sto_and_com':'Transport, Storage and Communication',
    }, inplace=True)

# Print the DataFrame to verify the structure
print(df)

# Convert specific columns to numeric (replace 'column_name' with the actual column names)
df['Primary Agriculture'] = pd.to_numeric(df['Primary Agriculture'], errors='coerce')
df['Mining and Quarrying'] = pd.to_numeric(df['Mining and Quarrying'], errors='coerce')
df['Electricity, Gas and Water Supply'] = pd.to_numeric(df['Electricity, Gas and Water Supply'], errors='coerce')
df['Construction'] = pd.to_numeric(df['Construction'], errors='coerce')
df['Real Estate'] = pd.to_numeric(df['Real Estate'], errors='coerce')
df['Education, Health & Others'] = pd.to_numeric(df['Education, Health & Others'], errors='coerce')
df['Household Sector'] = pd.to_numeric(df['Household Sector'], errors='coerce')
df['Transport, Storage and Communication'] = pd.to_numeric(df['Transport, Storage and Communication'], errors='coerce')


# Select only the numeric columns to perform the division
numeric_columns = df.select_dtypes(include=[float, int])

# Divide the numeric columns by 1000
df[numeric_columns.columns] = numeric_columns / 1000

# Reset the index to remove the default numeric index
df.reset_index(drop=True, inplace=True)

# Now, you can create a bar chart
df.plot(kind='bar', legend=True,edgecolor='black', linewidth=1.2, figsize=(12, 6))
plt.title(title)
plt.xlabel('Sector')
plt.ylabel('Total (RM billion)')

# Format the y-axis labels to display 2 decimal places
plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, pos: '{:.2f}'.format(x)))

plt.savefig('Total Loan Disbursed by Sector.jpg')
plt.show()
